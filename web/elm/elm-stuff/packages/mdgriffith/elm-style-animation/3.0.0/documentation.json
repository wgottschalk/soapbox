[
  {
    "name": "Animation",
    "comment": " A library for animations.\n\n# Setting up an animation\n@docs State, subscription, Msg, render\n\n# Creating an animation\n@docs  interrupt, queue, wait, to, toWith, toWithEach, set, repeat, loop, update, style, styleWith, styleWithEach, spring, easing, speed\n\n# Animatable Properties\n@docs opacity, display, inline, inlineBlock, flex, inlineFlex, block, none, top, left, right, bottom, width, height, padding, paddingLeft, paddingRight, paddingTop, paddingBottom, margin, marginLeft, marginRight, marginTop, marginBottom, color, backgroundColor, borderColor, borderWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderBottomWidth, borderRadius, borderTopLeftRadius, borderTopRightRadius, borderBottomLeftRadius, borderBottomRightRadius, shadow, textShadow, insetShadow\n\n# Transforms\n@docs scale, scale3d, rotate, rotate3d, translate, translate3d\n\n# Animatable CSS Filters\n@docs filterUrl, blur, brightness, contrast, grayscale, greyscale, hueRotate, invert, saturate, sepia\n\n# Animatable Svg Properties\n@docs fill, stroke, strokeWidth, x, y, cx, cy, radius, radiusX, radiusY, points\n\n# Constructing an Svg Path\n@docs path, move, moveTo, close, QuadraticCurve, curve, curveTo, CubicCurve, curve2, curve2To\n\n\n# Units\n@docs px, percent, em, rem, turn, deg, grad, rad\n\n# Advanced\n@docs custom, exactly\n\n\n\n",
    "aliases": [
      {
        "name": "CubicCurve",
        "comment": " ",
        "args": [],
        "type": "{ control1 : ( Float, Float ) , control2 : ( Float, Float ) , point : ( Float, Float ) }"
      },
      {
        "name": "Msg",
        "comment": " ",
        "args": [],
        "type": "Animation.Model.Tick"
      },
      {
        "name": "QuadraticCurve",
        "comment": " ",
        "args": [],
        "type": "{ control : ( Float, Float ), point : ( Float, Float ) }"
      },
      {
        "name": "State",
        "comment": " ",
        "args": [],
        "type": "Animation.Model.Animation Basics.Never"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "backgroundColor",
        "comment": " ",
        "type": "Color.Color -> Animation.Model.Property"
      },
      {
        "name": "block",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "blur",
        "comment": " Create a CSS blur filter, these stack with other filters.\n",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderBottomLeftRadius",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderBottomRightRadius",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderBottomWidth",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderColor",
        "comment": " ",
        "type": "Color.Color -> Animation.Model.Property"
      },
      {
        "name": "borderLeftWidth",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderRadius",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderRightWidth",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderTopLeftRadius",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderTopRightRadius",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderTopWidth",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "borderWidth",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "bottom",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "brightness",
        "comment": " Create a CSS brightness filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "close",
        "comment": " Close a Path\n",
        "type": "Animation.Model.PathCommand"
      },
      {
        "name": "color",
        "comment": " ",
        "type": "Color.Color -> Animation.Model.Property"
      },
      {
        "name": "contrast",
        "comment": " Create a CSS contrast filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "curve",
        "comment": " Create a relative curve with 1 control point and a target point.\nThis is a Quadratic curve in teh svg spec.\n",
        "type": "Animation.QuadraticCurve -> Animation.Model.PathCommand"
      },
      {
        "name": "curve2",
        "comment": " Create a relative Curve with 2 control points and a target point.\nThis is a Cubic Curve in the svg spec.\n\n",
        "type": "Animation.CubicCurve -> Animation.Model.PathCommand"
      },
      {
        "name": "curve2To",
        "comment": " Create an absolute Curve with 2 control points and a target point.\nThis is a Cubic Curve in the svg spec.\n\n",
        "type": "Animation.CubicCurve -> Animation.Model.PathCommand"
      },
      {
        "name": "curveTo",
        "comment": " Create an absolute curve with 1 control point and a target point.\nThis is a Quadratic curve in teh svg spec.\n",
        "type": "Animation.QuadraticCurve -> Animation.Model.PathCommand"
      },
      {
        "name": "custom",
        "comment": " Advanced: Animate a custom property by providing it's name, a float value, and the units it should have.\n\n",
        "type": "String -> Float -> String -> Animation.Model.Property"
      },
      {
        "name": "cx",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "cy",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "deg",
        "comment": " ",
        "type": "Float -> Animation.Angle"
      },
      {
        "name": "display",
        "comment": " ",
        "type": "Animation.DisplayMode -> Animation.Model.Property"
      },
      {
        "name": "easing",
        "comment": " Specify a custom Easing to animate with.  To be used in conjunction with `StyleWith`, `StyleWithEach`, `toWith`, and `toWithEach`.\n\n",
        "type": "{ duration : Time.Time, ease : Float -> Float } -> Animation.Model.Interpolation"
      },
      {
        "name": "em",
        "comment": " ",
        "type": "Float -> Animation.Length"
      },
      {
        "name": "exactly",
        "comment": " Set a non-numerical to an exact value.  For example\n\n```\nAnimation.set\n    [ Animation.exactly \"border-style\" \"dashed\"\n    ]\n```\n\n",
        "type": "String -> String -> Animation.Model.Property"
      },
      {
        "name": "fill",
        "comment": " ",
        "type": "Color.Color -> Animation.Model.Property"
      },
      {
        "name": "filterUrl",
        "comment": " Create a CSS filter-url\n",
        "type": "String -> Animation.Model.Property"
      },
      {
        "name": "flex",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "grad",
        "comment": " ",
        "type": "Float -> Animation.Angle"
      },
      {
        "name": "grayscale",
        "comment": " Create a CSS grayscale filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "greyscale",
        "comment": " Create a CSS grayscale filter, these stack with other filters.  This is a spelling adjusment.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "height",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "hueRotate",
        "comment": " Create a CSS hue-rotation filter, these stack with other filters.\n",
        "type": "Animation.Angle -> Animation.Model.Property"
      },
      {
        "name": "inline",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "inlineBlock",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "inlineFlex",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "insetShadow",
        "comment": " ",
        "type": "Animation.Shadow -> Animation.Model.Property"
      },
      {
        "name": "interrupt",
        "comment": " Interrupt any running animations with the following animation.\n\n",
        "type": "List (Animation.Model.Step msg) -> Animation.Model.Animation msg -> Animation.Model.Animation msg"
      },
      {
        "name": "invert",
        "comment": " Create a CSS invert filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "left",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "loop",
        "comment": " Repeat a number of steps until interrupted.\n",
        "type": "List (Animation.Model.Step msg) -> Animation.Model.Step msg"
      },
      {
        "name": "margin",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "marginBottom",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "marginLeft",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "marginRight",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "marginTop",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "move",
        "comment": "\n",
        "type": "Float -> Float -> Animation.Model.PathCommand"
      },
      {
        "name": "moveTo",
        "comment": " ",
        "type": "Float -> Float -> Animation.Model.PathCommand"
      },
      {
        "name": "none",
        "comment": " ",
        "type": "Animation.DisplayMode"
      },
      {
        "name": "opacity",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "padding",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "paddingBottom",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "paddingLeft",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "paddingRight",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "paddingTop",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "path",
        "comment": " To be used with the svg path element.  Renders as the d property.\n",
        "type": "List Animation.Model.PathCommand -> Animation.Model.Property"
      },
      {
        "name": "percent",
        "comment": " ",
        "type": "Float -> Animation.Length"
      },
      {
        "name": "points",
        "comment": " Used with the svg polygon element\n",
        "type": "List ( Float, Float ) -> Animation.Model.Property"
      },
      {
        "name": "px",
        "comment": " ",
        "type": "Float -> Animation.Length"
      },
      {
        "name": "queue",
        "comment": " Add an animation to the queue, execiting once the current animation finishes\n\n",
        "type": "List (Animation.Model.Step msg) -> Animation.Model.Animation msg -> Animation.Model.Animation msg"
      },
      {
        "name": "rad",
        "comment": " ",
        "type": "Float -> Animation.Angle"
      },
      {
        "name": "radius",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "radiusX",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "radiusY",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "rem",
        "comment": " ",
        "type": "Float -> Animation.Length"
      },
      {
        "name": "render",
        "comment": " Render style properties into the style attribute and render other attributes as needed for svg.\n\nCombine \"transform\" based properties into a single css property.\n\nCombine \"filter\" based properties into a single css property.\n",
        "type": "Animation.Model.Animation msgA -> List (Html.Attribute msgB)"
      },
      {
        "name": "repeat",
        "comment": " Repeat a number of steps `n` times.\n",
        "type": "Int -> List (Animation.Model.Step msg) -> Animation.Model.Step msg"
      },
      {
        "name": "right",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "rotate",
        "comment": " ",
        "type": "Animation.Angle -> Animation.Model.Property"
      },
      {
        "name": "rotate3d",
        "comment": " ",
        "type": "Animation.Angle -> Animation.Angle -> Animation.Angle -> Animation.Model.Property"
      },
      {
        "name": "saturate",
        "comment": " Create a CSS saturate filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "scale3d",
        "comment": " ",
        "type": "Float -> Float -> Float -> Animation.Model.Property"
      },
      {
        "name": "sepia",
        "comment": " Create a CSS sepia filter, these stack with other filters.\n",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "set",
        "comment": " Immediately set properties to a value.\n",
        "type": "List Animation.Model.Property -> Animation.Model.Step msg"
      },
      {
        "name": "shadow",
        "comment": " ",
        "type": "Animation.Shadow -> Animation.Model.Property"
      },
      {
        "name": "speed",
        "comment": " Specify a speed to animate with.  To be used in conjunction with `StyleWith`, `StyleWithEach`, `toWith`, and `toWithEach`.\n\n",
        "type": "{ perSecond : Float } -> Animation.Model.Interpolation"
      },
      {
        "name": "spring",
        "comment": " Specify a custom Spring to animate with.  To be used in conjunction with `StyleWith`, `StyleWithEach`, `toWith`, and `toWithEach`.\n\n",
        "type": "{ stiffness : Float, damping : Float } -> Animation.Model.Interpolation"
      },
      {
        "name": "stroke",
        "comment": " ",
        "type": "Color.Color -> Animation.Model.Property"
      },
      {
        "name": "strokeWidth",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "style",
        "comment": " Set an initial style for an animation.\n\nUses standard defaults for interpolation\n\n",
        "type": "List Animation.Model.Property -> Animation.Model.Animation msg"
      },
      {
        "name": "styleWith",
        "comment": " Set an initial style for an animation and override the standard default for interpolation.\n\n",
        "type": "Animation.Model.Interpolation -> List Animation.Model.Property -> Animation.Model.Animation msg"
      },
      {
        "name": "styleWithEach",
        "comment": " Set an initial style for an animation and specify the interpolation to be used for each property.\n\nAny property not listed will receive interpolation based on the standard defaults.\n",
        "type": "List ( Animation.Model.Interpolation, Animation.Model.Property ) -> Animation.Model.Animation msg"
      },
      {
        "name": "subscription",
        "comment": " Create a subscription to AnimationFrame.times.\n\nIt is throttled based on whether the current animation is running or not.\n\n",
        "type": "(Animation.Msg -> msgB) -> List (Animation.Model.Animation msgA) -> Platform.Sub.Sub msgB"
      },
      {
        "name": "textShadow",
        "comment": " ",
        "type": "Animation.Shadow -> Animation.Model.Property"
      },
      {
        "name": "to",
        "comment": " Animate to a set of target values, using the default interpolation.\n\n",
        "type": "List Animation.Model.Property -> Animation.Model.Step msg"
      },
      {
        "name": "toWith",
        "comment": " Animate to a set of target values. Use a temporary interpolation instead of the default.\nThe interpolation will revert back to default after this step.\n",
        "type": "Animation.Model.Interpolation -> List Animation.Model.Property -> Animation.Model.Step msg"
      },
      {
        "name": "toWithEach",
        "comment": " Animate to a set of target values. Use a temporary interpolation for each property instead of the default.\nThe interpolation will revert back to default after this step.\n",
        "type": "List ( Animation.Model.Interpolation, Animation.Model.Property ) -> Animation.Model.Step msg"
      },
      {
        "name": "top",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "translate",
        "comment": " ",
        "type": "Animation.Length -> Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "translate3d",
        "comment": " ",
        "type": "Animation.Length -> Animation.Length -> Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "turn",
        "comment": " ",
        "type": "Float -> Animation.Angle"
      },
      {
        "name": "update",
        "comment": " Update an animation.\n",
        "type": "Animation.Msg -> Animation.Model.Animation msg -> Animation.Model.Animation msg"
      },
      {
        "name": "wait",
        "comment": " ",
        "type": "Time.Time -> Animation.Model.Step msg"
      },
      {
        "name": "width",
        "comment": " ",
        "type": "Animation.Length -> Animation.Model.Property"
      },
      {
        "name": "x",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      },
      {
        "name": "y",
        "comment": " ",
        "type": "Float -> Animation.Model.Property"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Animation.Messenger",
    "comment": " Import this module if you want the ability to send a Msg at any point during your animation.\n\n@docs State, update, send\n\n",
    "aliases": [
      {
        "name": "State",
        "comment": " An Animation State that also tracks your `Msg` type.\n",
        "args": [
          "msg"
        ],
        "type": "Animation.Model.Animation msg"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "send",
        "comment": " An animation `Step` which will send a message.  For example\n\n    Animation.interrupt\n        [ Animation.to [Animation.opacity 0]\n        , Animation.send OpacityIsNotZero\n        ]\n\n\n",
        "type": "msg -> Animation.Model.Step msg"
      },
      {
        "name": "update",
        "comment": " An update that returns the updated animation as well as any messages sent in `Cmd` form.\n",
        "type": "Animation.Model.Tick -> Animation.Model.Animation msg -> ( Animation.Model.Animation msg, Platform.Cmd.Cmd msg )"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]